// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/orchest/orchest/services/orchest-controller/pkg/componentregistry (interfaces: Component)

// Package mock_componentregistry is a generated GoMock package.
package mock_componentregistry

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	componentregistry "github.com/orchest/orchest/services/orchest-controller/pkg/componentregistry"
)

// MockComponent is a mock of Component interface.
type MockComponent struct {
	ctrl     *gomock.Controller
	recorder *MockComponentMockRecorder
}

// MockComponentMockRecorder is the mock recorder for MockComponent.
type MockComponentMockRecorder struct {
	mock *MockComponent
}

// NewMockComponent creates a new mock instance.
func NewMockComponent(ctrl *gomock.Controller) *MockComponent {
	mock := &MockComponent{ctrl: ctrl}
	mock.recorder = &MockComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComponent) EXPECT() *MockComponentMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockComponent) Delete(arg0 context.Context, arg1 string, arg2 componentregistry.Message, arg3 chan componentregistry.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", arg0, arg1, arg2, arg3)
}

// Delete indicates an expected call of Delete.
func (mr *MockComponentMockRecorder) Delete(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockComponent)(nil).Delete), arg0, arg1, arg2, arg3)
}

// Start mocks base method.
func (m *MockComponent) Start(arg0 context.Context, arg1 string, arg2 componentregistry.Message, arg3 chan componentregistry.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", arg0, arg1, arg2, arg3)
}

// Start indicates an expected call of Start.
func (mr *MockComponentMockRecorder) Start(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockComponent)(nil).Start), arg0, arg1, arg2, arg3)
}

// Stop mocks base method.
func (m *MockComponent) Stop(arg0 context.Context, arg1 string, arg2 componentregistry.Message, arg3 chan componentregistry.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop", arg0, arg1, arg2, arg3)
}

// Stop indicates an expected call of Stop.
func (mr *MockComponentMockRecorder) Stop(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockComponent)(nil).Stop), arg0, arg1, arg2, arg3)
}

// Update mocks base method.
func (m *MockComponent) Update(arg0 context.Context, arg1 string, arg2 componentregistry.Message, arg3 chan componentregistry.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3)
}

// Update indicates an expected call of Update.
func (mr *MockComponentMockRecorder) Update(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockComponent)(nil).Update), arg0, arg1, arg2, arg3)
}
